generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum TipoUsuario {
  ADMIN
  CLIENTE
  TRABAJADOR
}

enum TipoServicio {
  POR_HORA
  POR_CANTIDAD
}

enum TipoOrden {
  SERVICIO
  COMPRA
}

model Usuario {
  id            Int            @id @default(autoincrement())
  nombre        String
  email         String         @unique
  contrasena    String
  tipo          TipoUsuario
  direccion     String?
  telefono      String?
  cliente       Cliente?
  trabajador    Trabajador?
  notificaciones Notificacion[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  createdBy     Int?
  activo        Boolean        @default(true)
}

model Cliente {
  id        Int      @id @default(autoincrement())
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
  usuarioId Int      @unique
  direccion String
  telefono  String
  ordenes   Orden[]
  ventas    Venta[]
}

model Trabajador {
  id          Int      @id @default(autoincrement())
  usuario     Usuario  @relation(fields: [usuarioId], references: [id])
  usuarioId   Int      @unique
  posicion    String
  departamento String
}

model Servicio {
  id            Int             @id @default(autoincrement())
  nombre        String
  descripcion   String
  precioBase    Float
  tipo          TipoServicio
  estado        String         @default("ACTIVO")
  ordenes       OrdenServicio[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Orden {
  id                Int      @id @default(autoincrement())
  cliente           Cliente  @relation(fields: [clienteId], references: [id])
  clienteId         Int
  fecha             DateTime @default(now())
  fechaProgramada   DateTime?
  estado            String
  tipo              TipoOrden @default(SERVICIO)
  descripcion       String?  @db.Text
  servicios         OrdenServicio[]
  factura           Factura?
  venta             Venta?   @relation(fields: [ventaId], references: [id])
  ventaId           Int?     @unique
}

model OrdenServicio {
  id          Int      @id @default(autoincrement())
  orden       Orden    @relation(fields: [ordenId], references: [id])
  ordenId     Int
  servicio    Servicio @relation(fields: [servicioId], references: [id])
  servicioId  Int
  cantidad    Int
  precioUnitario Float
}

model Factura {
  id            Int      @id @default(autoincrement())
  ordenId       Int      @unique
  orden         Orden    @relation(fields: [ordenId], references: [id])
  subtotal      Float
  total         Float
  fechaEmision  DateTime @default(now())
  estado        String   @default("PENDIENTE")
  archivoPath   String?
  firmaCliente  String?
  firmaAdmin    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("facturas")
}

model Notificacion {
  id          Int      @id @default(autoincrement())
  usuario     Usuario  @relation(fields: [usuarioId], references: [id])
  usuarioId   Int
  mensaje     String
  fecha       DateTime @default(now())
  leida       Boolean  @default(false)
}

model Categoria {
  id          Int       @id @default(autoincrement())
  nombre      String
  descripcion String?
  productos   Producto[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Producto {
  id          Int       @id @default(autoincrement())
  nombre      String
  descripcion String?   @db.Text
  precio      Float
  imagen      String?
  categoria   Categoria @relation(fields: [categoriaId], references: [id])
  categoriaId Int
  stock       Stock?
  detallesVenta DetalleVenta[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  activo      Boolean   @default(true)
}

model Stock {
  id          Int      @id @default(autoincrement())
  producto    Producto @relation(fields: [productoId], references: [id])
  productoId  Int      @unique
  cantidad    Int
  minimo      Int      @default(5)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Venta {
  id          Int            @id @default(autoincrement())
  cliente     Cliente        @relation(fields: [clienteId], references: [id])
  clienteId   Int
  fecha       DateTime       @default(now())
  total       Float
  estado      String         @default("PENDIENTE")
  detalles    DetalleVenta[]
  orden       Orden?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model DetalleVenta {
  id          Int      @id @default(autoincrement())
  venta       Venta    @relation(fields: [ventaId], references: [id])
  ventaId     Int
  producto    Producto @relation(fields: [productoId], references: [id])
  productoId  Int
  cantidad    Int
  precioUnitario Float
  subtotal    Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
} 
