generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Factura {
  id           Int      @id @default(autoincrement())
  ordenId      Int      @unique
  subtotal     Float
  total        Float
  fechaEmision DateTime @default(now())
  estado       String   @default("PENDIENTE")
  archivoPath  String?
  firmaCliente String?
  firmaAdmin   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  orden        orden    @relation(fields: [ordenId], references: [id])

  @@map("facturas")
}

model categoria {
  id          Int        @id @default(autoincrement())
  nombre      String
  descripcion String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime
  producto    producto[]
}

model cliente {
  id        Int     @id @default(autoincrement())
  usuarioId Int     @unique(map: "Cliente_usuarioId_key")
  direccion String
  telefono  String
  usuario   usuario @relation(fields: [usuarioId], references: [id], map: "Cliente_usuarioId_fkey")
  orden     orden[]
  venta     venta[]
}

model detalleventa {
  id             Int      @id @default(autoincrement())
  ventaId        Int
  productoId     Int
  cantidad       Int
  precioUnitario Float
  subtotal       Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime
  producto       producto @relation(fields: [productoId], references: [id], map: "DetalleVenta_productoId_fkey")
  venta          venta    @relation(fields: [ventaId], references: [id], map: "DetalleVenta_ventaId_fkey")

  @@index([productoId], map: "DetalleVenta_productoId_fkey")
  @@index([ventaId], map: "DetalleVenta_ventaId_fkey")
}

model notificacion {
  id         Int      @id @default(autoincrement())
  usuarioId  Int
  mensaje    String   @db.Text
  fecha      DateTime @default(now())
  createdAt  DateTime @default(now())
  enlaceId   Int?
  enlaceTipo String?
  estado     String   @default("PENDIENTE")
  tipo       String
  updatedAt  DateTime
  usuario    usuario  @relation(fields: [usuarioId], references: [id], map: "Notificacion_usuarioId_fkey")

  @@index([usuarioId], map: "Notificacion_usuarioId_fkey")
}

model orden {
  id              Int             @id @default(autoincrement())
  clienteId       Int
  fecha           DateTime        @default(now())
  estado          String
  descripcion     String?         @db.Text
  fechaProgramada DateTime?
  tipo            orden_tipo      @default(SERVICIO)
  ventaId         Int?            @unique(map: "Orden_ventaId_key")
  factura         Factura?
  cliente         cliente         @relation(fields: [clienteId], references: [id], map: "Orden_clienteId_fkey")
  venta           venta?          @relation(fields: [ventaId], references: [id], map: "Orden_ventaId_fkey")
  ordenservicio   ordenservicio[]

  @@index([clienteId], map: "Orden_clienteId_fkey")
}

model ordenservicio {
  id             Int      @id @default(autoincrement())
  ordenId        Int
  servicioId     Int
  cantidad       Int
  precioUnitario Float
  orden          orden    @relation(fields: [ordenId], references: [id], map: "OrdenServicio_ordenId_fkey")
  servicio       servicio @relation(fields: [servicioId], references: [id], map: "OrdenServicio_servicioId_fkey")

  @@index([ordenId], map: "OrdenServicio_ordenId_fkey")
  @@index([servicioId], map: "OrdenServicio_servicioId_fkey")
}

model producto {
  id           Int            @id @default(autoincrement())
  nombre       String
  descripcion  String?        @db.Text
  precio       Float
  imagen       String?
  categoriaId  Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  activo       Boolean        @default(true)
  detalleventa detalleventa[]
  categoria    categoria      @relation(fields: [categoriaId], references: [id], map: "Producto_categoriaId_fkey")
  stock        stock?

  @@index([categoriaId], map: "Producto_categoriaId_fkey")
}

model servicio {
  id            Int             @id @default(autoincrement())
  nombre        String
  descripcion   String
  precioBase    Float
  createdAt     DateTime        @default(now())
  estado        String          @default("ACTIVO")
  updatedAt     DateTime
  tipo          servicio_tipo
  ordenservicio ordenservicio[]
}

model stock {
  id         Int      @id @default(autoincrement())
  productoId Int      @unique(map: "Stock_productoId_key")
  cantidad   Int
  minimo     Int      @default(5)
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  producto   producto @relation(fields: [productoId], references: [id], map: "Stock_productoId_fkey")
}

model trabajador {
  id           Int     @id @default(autoincrement())
  usuarioId    Int     @unique(map: "Trabajador_usuarioId_key")
  posicion     String
  departamento String
  usuario      usuario @relation(fields: [usuarioId], references: [id], map: "Trabajador_usuarioId_fkey")
}

model usuario {
  id           Int            @id @default(autoincrement())
  nombre       String
  email        String         @unique(map: "Usuario_email_key")
  contrasena   String
  tipo         usuario_tipo
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  createdBy    Int?
  direccion    String?
  telefono     String?
  activo       Boolean        @default(true)
  cliente      cliente?
  notificacion notificacion[]
  trabajador   trabajador?
}

model venta {
  id           Int            @id @default(autoincrement())
  clienteId    Int
  fecha        DateTime       @default(now())
  total        Float
  estado       String         @default("PENDIENTE")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  detalleventa detalleventa[]
  orden        orden?
  cliente      cliente        @relation(fields: [clienteId], references: [id], map: "Venta_clienteId_fkey")

  @@index([clienteId], map: "Venta_clienteId_fkey")
}

enum usuario_tipo {
  ADMIN
  CLIENTE
  TRABAJADOR
}

enum orden_tipo {
  SERVICIO
  COMPRA
}

enum servicio_tipo {
  POR_HORA
  POR_CANTIDAD
}
