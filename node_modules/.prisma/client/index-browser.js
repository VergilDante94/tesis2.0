
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UsuarioScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  email: 'email',
  contrasena: 'contrasena',
  tipo: 'tipo',
  direccion: 'direccion',
  telefono: 'telefono',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy',
  activo: 'activo'
};

exports.Prisma.ClienteScalarFieldEnum = {
  id: 'id',
  usuarioId: 'usuarioId',
  direccion: 'direccion',
  telefono: 'telefono'
};

exports.Prisma.TrabajadorScalarFieldEnum = {
  id: 'id',
  usuarioId: 'usuarioId',
  posicion: 'posicion',
  departamento: 'departamento'
};

exports.Prisma.ServicioScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  descripcion: 'descripcion',
  precioBase: 'precioBase',
  tipo: 'tipo',
  estado: 'estado',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrdenScalarFieldEnum = {
  id: 'id',
  clienteId: 'clienteId',
  fecha: 'fecha',
  fechaProgramada: 'fechaProgramada',
  estado: 'estado',
  tipo: 'tipo',
  descripcion: 'descripcion',
  ventaId: 'ventaId'
};

exports.Prisma.OrdenServicioScalarFieldEnum = {
  id: 'id',
  ordenId: 'ordenId',
  servicioId: 'servicioId',
  cantidad: 'cantidad',
  precioUnitario: 'precioUnitario'
};

exports.Prisma.FacturaScalarFieldEnum = {
  id: 'id',
  ordenId: 'ordenId',
  subtotal: 'subtotal',
  total: 'total',
  fechaEmision: 'fechaEmision',
  estado: 'estado',
  archivoPath: 'archivoPath',
  firmaCliente: 'firmaCliente',
  firmaAdmin: 'firmaAdmin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificacionScalarFieldEnum = {
  id: 'id',
  usuarioId: 'usuarioId',
  tipo: 'tipo',
  mensaje: 'mensaje',
  fecha: 'fecha',
  estado: 'estado',
  enlaceId: 'enlaceId',
  enlaceTipo: 'enlaceTipo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CategoriaScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  descripcion: 'descripcion',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductoScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  descripcion: 'descripcion',
  precio: 'precio',
  imagen: 'imagen',
  categoriaId: 'categoriaId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  activo: 'activo'
};

exports.Prisma.StockScalarFieldEnum = {
  id: 'id',
  productoId: 'productoId',
  cantidad: 'cantidad',
  minimo: 'minimo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VentaScalarFieldEnum = {
  id: 'id',
  clienteId: 'clienteId',
  fecha: 'fecha',
  total: 'total',
  estado: 'estado',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DetalleVentaScalarFieldEnum = {
  id: 'id',
  ventaId: 'ventaId',
  productoId: 'productoId',
  cantidad: 'cantidad',
  precioUnitario: 'precioUnitario',
  subtotal: 'subtotal',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.TipoUsuario = exports.$Enums.TipoUsuario = {
  ADMIN: 'ADMIN',
  CLIENTE: 'CLIENTE',
  TRABAJADOR: 'TRABAJADOR'
};

exports.TipoServicio = exports.$Enums.TipoServicio = {
  POR_HORA: 'POR_HORA',
  POR_CANTIDAD: 'POR_CANTIDAD'
};

exports.TipoOrden = exports.$Enums.TipoOrden = {
  SERVICIO: 'SERVICIO',
  COMPRA: 'COMPRA'
};

exports.Prisma.ModelName = {
  Usuario: 'Usuario',
  Cliente: 'Cliente',
  Trabajador: 'Trabajador',
  Servicio: 'Servicio',
  Orden: 'Orden',
  OrdenServicio: 'OrdenServicio',
  Factura: 'Factura',
  Notificacion: 'Notificacion',
  Categoria: 'Categoria',
  Producto: 'Producto',
  Stock: 'Stock',
  Venta: 'Venta',
  DetalleVenta: 'DetalleVenta'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
